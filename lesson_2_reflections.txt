Lesson 2 reflections:

A) What happens when you initialize a repository? Why do you need to do it?

	A ".git" folder and corresponding files are created. It is done in order to create all the files and resources needed to start using git commands
	and all the benefits of git

B) How is the staging area different from the working directory and the repository? What value do you think it offers?

	All files are actually contained within the working directory where git was installed. Only files actively being tracked by git are considered within the repository though. Staging area represents the status for a file that is being prepared for a commit into the repository. That is, it separates the files within the working directory that will be added to the repository from files that are still in the directory but wont be added to the respository. Then a commit, changes the status of the files in the staging area to being in the repository where they will be tracked by git.

C) How can you use the staging area to make sure you have one commit per logical change?

	after working on various files, you can place the logically connected files together and commit, before putting the other in the area and committing in a
	separate commit.

D) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Situations include:
	- Experimental features
	- testing out languages
	- Making custom versions of program for certain reasons

	Branches would help to keep a working version up to date without having to keep track of commit Ids, expecially if one needs to go and make bug fixes
	on the main code while working on branched code.

E) How do the diagrams help you visualize the branch structure?

	They help by creating a visual representation of the branch structure which is easier to understand

F) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging combines all the commits in both branches to a new state that reflects all of them. It is represented the way we do because it shows that
	all the history of both branches is preserved in the current result branch, not just a snapshot of the combined content.

G) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Git's basic automatic merging means the most obvios lines that were added or removed in exactly the same way such that the end result is the same
	will be handled for you.

	Pros:
	- The process is simple and much more predictable
	- User can be confident of the exact result of merges

	Cons:
	- Some more obvious differences in files with simple fixes are still left up to the user to work through
