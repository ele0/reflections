A) When would you want to use a remote repository rather than keeping all your work local?

	- When you work across multiple machines
	- When you work in a team of 2 or more people
	- When you want to easily share and have others take a look at what you're working on

B) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	- You might not want to get code others have uploaded until you are ready to go through it
	- In the case of pushing, you might want to finish the work you're doing before putting up on a public repository
	- Gives you more control over what changes make it down into your local copy and how you want to handle those changes

C) Describe the differences between forks, clones, and branches. When would you use one instead of another?

	- A branch is a group of parent-child related commits within a git repository. Commits are related to each other via a tree structure
	and new branches can be created of the line of commits all within the same repository.
	- A clone, is a copy of a git repository that includes all the commits/branches and the associated history.
	- When a github repository is cloned on a github server, that is referred to as a fork.

	A clone is needed if a new copy of the repository is needed and you don't want to make any changes to the existing repository. A Fork is needed when you want to work on a repository on github, but you either don't want to make changes to the existing repository or you aren't allowed to make changes. A branch is needed if you want to keep working on the same repository but wish to group certain future changes together while allowing the original branch to be maintained separately.

D) What is the benefit of having a copy of the last known state of the remote stored locally?

	It allows you and git to merge properly when it is time to combine your local repository with the remote one. For example, git will be able to tell if and what	changes had been made remotely while you were working on your own copy.
	Also you will be able to incorporate those changes when you are ready, work through any conflicts and merge before pushing back to the server.

E) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Would need to use some other location to host files OR would learn and use SVN/CVS. Learning all the commands etc wouldn't be necessary if using something
	like google docs/dropbox but would lose the benefits of doing reviews and so on from the web interface and controlling separation until ready to merge with the "master" version.
	Would require a lot more trust between team members because people will need to not make changes to the master version until agreed. In general, you would need to create additional processes and/or rules to deal with many people editing the same file while protecting a master copy and so on.

F) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When collaborating with a number of people, it's better to keep the master branch clean and work on edits in a separate branch before sending out the code
	for a review and doing a final merge after someone else has gotten a chance to review the code.
	Working directly in master, does minimise the number of steps and complication in making changes and forces one integrate before too many changes are made on the branch.
	But working with a branch, allows for more checks and minimises the chance of the master branch being broken during integrations
